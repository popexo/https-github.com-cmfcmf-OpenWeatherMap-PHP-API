(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),o=n(6),r=(n(0),n(72)),i={title:"Air Pollution API",sidebar_label:"Air Pollution"},l={unversionedId:"apis/air-pollution",id:"apis/air-pollution",isDocsHomePage:!1,title:"Air Pollution API",description:"This API allows you to retrieve the current, forecast and historic ultraviolet index (UV index).",source:"@site/docs/apis/air-pollution.md",slug:"/apis/air-pollution",permalink:"/OpenWeatherMap-PHP-API/docs/apis/air-pollution",editUrl:"https://github.com/cmfcmf/OpenWeatherMap-PHP-API/edit/master/docs/docs/apis/air-pollution.md",version:"current",lastUpdatedBy:"Christian Flach",lastUpdatedAt:1580329038,sidebar_label:"Air Pollution",sidebar:"someSidebar",previous:{title:"Weather Forecast API",permalink:"/OpenWeatherMap-PHP-API/docs/apis/weather-forecast"},next:{title:"Ultraviolet Index API",permalink:"/OpenWeatherMap-PHP-API/docs/apis/uv-index"}},c=[{value:"Usage",id:"usage",children:[]},{value:"Carbon Monoxide (CO)",id:"carbon-monoxide-co",children:[]},{value:"Ozone (O3)",id:"ozone-o3",children:[]},{value:"Nitrogen Dioxide (NO2)",id:"nitrogen-dioxide-no2",children:[]},{value:"Sulfor Dioxide (SO2)",id:"sulfor-dioxide-so2",children:[]}],p={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This API allows you to retrieve the current, forecast and historic ultraviolet index (UV index)."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Corresponding OpenWeatherMap documentation:"),Object(r.b)("ul",{parentName:"blockquote"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://openweathermap.org/api/pollution/co"}),"Carbon Monoxide (CO)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://openweathermap.org/api/pollution/o3"}),"Ozone (O3)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://openweathermap.org/api/pollution/no2"}),"Nitrogen Dioxide (NO2)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://openweathermap.org/api/pollution/so2"}),"Sulfor Dioxide (SO2)")))),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"$type"),": Can be one of ",Object(r.b)("inlineCode",{parentName:"li"},'"O3"'),", ",Object(r.b)("inlineCode",{parentName:"li"},'"NO2"'),", ",Object(r.b)("inlineCode",{parentName:"li"},'"SO2"'),", or ",Object(r.b)("inlineCode",{parentName:"li"},'"CO"'),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"$lat")," / ",Object(r.b)("inlineCode",{parentName:"li"},"$lng"),": Latitude and longitude must be provided as strings, because\nthe number of digits after the decimal point determines the search radius.\nSpecifying more digits leads to closer results, but too many digits can lead\nto no result at all."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"$date"),": Date to retrieve data from. ",Object(r.b)("inlineCode",{parentName:"li"},'"current"')," requests the newest available\ninformation. You can also specify a date in ISO 8601 format. More information on\nthat can be found ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"https://openweathermap.org/api/pollution/co"}),"in the OpenWeatherMap documentation"),".")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),'// $type =\n$co = $owm->getAirPollution($type, $lat, $lng, $date = "current");\n')),Object(r.b)("p",null,"The return value depends on the ",Object(r.b)("inlineCode",{parentName:"p"},"$type")," and is discussed in the next sections."),Object(r.b)("h2",{id:"carbon-monoxide-co"},"Carbon Monoxide (CO)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),'$co = $owm->getAirPollution("CO", "52", "13");\nif ($co === null) {\n    // No data available\n} else {\n    foreach ($co->values as $data) {\n        echo $data["value"];\n        echo $data["value"]->getPrecision();\n        echo $data["pressure"];\n    }\n}\n')),Object(r.b)("h2",{id:"ozone-o3"},"Ozone (O3)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),'$o3 = $owm->getAirPollution("O3", "52", "13");\nif ($o3 === null) {\n    // No data available\n} else {\n    echo $o3->value;\n}\n')),Object(r.b)("h2",{id:"nitrogen-dioxide-no2"},"Nitrogen Dioxide (NO2)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),'$no2 = $owm->getAirPollution("NO2", "52", "13");\nif ($no2 === null) {\n    // No data available\n} else {\n    echo $no2->value;\n    echo $no2->valueStratosphere;\n    echo $no2->valueTroposphere;\n}\n')),Object(r.b)("h2",{id:"sulfor-dioxide-so2"},"Sulfor Dioxide (SO2)"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),'$so2 = $owm->getAirPollution("SO2", "52", "13");\nif ($so2 === null) {\n    // No data available\n} else {\n    foreach ($so2->values as $data) {\n        echo $data["value"];\n        echo $data["value"]->getPrecision();\n        echo $data["pressure"];\n    }\n}\n')))}u.isMDXComponent=!0},72:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return O}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),u=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=u(n),d=a,O=b["".concat(i,".").concat(d)]||b[d]||s[d]||r;return n?o.a.createElement(O,l(l({ref:t},p),{},{components:n})):o.a.createElement(O,l({ref:t},p))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);